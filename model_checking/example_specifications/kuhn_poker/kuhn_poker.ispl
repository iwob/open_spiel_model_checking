Semantics=SingleAssignment;

Agent Environment
    Obsvars:
        turn : {deal0, deal1, turn0, turn1, turn2, rewards, finish};
        action_0 : {bet, pass, none};
        action_1 : {bet, pass, none};
        action_2 : {bet, pass, none};
    end Obsvars
    Vars:
    	card_p0 : -1 .. 2;
    	card_p1 : -1 .. 2;
    	reward : -2 .. 2;
    end Vars
    Actions = { };
    Protocol: end Protocol
    Evolution:
        -- Dealing the first card
    	turn=deal1 if turn=deal0;
    	card_p0=0 if turn=deal0;
    	card_p0=1 if turn=deal0;
    	card_p0=2 if turn=deal0;
    	-- Dealing the second card
    	turn=turn0 if turn=deal1;
    	card_p1=0 if turn=deal1 and (! card_p0=0);
    	card_p1=1 if turn=deal1 and (! card_p0=1);
    	card_p1=2 if turn=deal1 and (! card_p0=2);
        -- Player 0 bets or passes
        turn=turn1 if turn=turn0;
    	action_0=bet if turn=turn0 and Player0.Action=bet;
    	action_0=pass if turn=turn0 and Player0.Action=pass;
    	-- Player 1 bets or passes
    	turn=rewards if turn=turn1 and ((action_0=bet and Player1.Action=bet) or (action_0=pass and Player1.Action=pass));
        turn=turn2 if turn=turn1 and (! ((action_0=bet and Player1.Action=bet) or (action_0=pass and Player1.Action=pass)));
    	action_1=bet if turn=turn1 and Player1.Action=bet;
    	action_1=pass if turn=turn1 and Player1.Action=pass;
    	-- If actions different then Player 0 once again can bet or pass
    	turn=rewards if turn=turn2;
    	action_2=bet if turn=turn2 and Player0.Action=bet;
    	action_2=pass if turn=turn2 and Player0.Action=pass;
    	turn=finish if turn=rewards;
    	reward = 2 if turn=rewards and ((action_1=bet and action_1=bet and card_p0 > card_p1) or
                      (action_0=pass and action_1=bet and action_2=bet and card_p0 > card_p1));
        reward = 1 if turn=rewards and ((action_0=pass and action_1=pass and card_p0 > card_p1) or
                      (action_0=bet and action_1=pass));
        reward = -1 if turn=rewards and ((action_0=pass and action_1=pass and card_p0 < card_p1) or
                      (action_0=pass and action_1=bet and action_2=pass));
        reward = -2 if turn=rewards and ((action_0=bet and action_1=bet and card_p0 < card_p1) or
                       (action_0=pass and action_1=bet and action_2=bet and card_p0 < card_p1));
    end Evolution
end Agent

Agent Player0
	Lobsvars = {card_p0};
    Vars:
        null : boolean; -- for syntax reasons only
    end Vars
    Actions = {pass, bet, none};
    Protocol:
        Environment.turn=turn0: {pass, bet};
        Environment.turn=turn2: {pass, bet};
        Other : { none }; -- technicality
    end Protocol
    Evolution:

        null=true if null=true;
    end Evolution
end Agent

Agent Player1
    Lobsvars = {card_p1};
    Vars:
        null : boolean; -- for syntax reasons only
    end Vars
    Actions = {pass, bet, none};
    Protocol:
        Environment.turn=turn1: {pass, bet};
        Other : { none }; -- technicality
    end Protocol
    Evolution:
        null=true if null=true;
    end Evolution
end Agent

Evaluation
    custom_condition if
        Environment.turn=finish and ((! Environment.card_p0 > Environment.card_p1) or Environment.reward >= 1);
        --Environment.turn=finish and Environment.reward >= 1;
    player0_has_higher_card if
        Environment.turn=finish and Environment.card_p0 > Environment.card_p1;
    reward_2 if
        Environment.turn=finish and Environment.reward = 2;
        --  ((Environment.action_1=bet and Environment.action_1=bet and Environment.card_p0 > Environment.card_p1) or
        --   (Environment.action_0=pass and Environment.action_1=bet and Environment.action_2=bet and Environment.card_p0 > Environment.card_p1));
    reward_1 if
        Environment.turn=finish and Environment.reward = 1;
        --  ((Environment.action_0=pass and Environment.action_1=pass and Environment.card_p0 > Environment.card_p1) or
        --   (Environment.action_0=bet and Environment.action_1=pass));
    reward_neg1 if
        Environment.turn=finish and Environment.reward = -1;
        --  ((Environment.action_0=pass and Environment.action_1=pass and Environment.card_p0 < Environment.card_p1) or
        --   (Environment.action_0=pass and Environment.action_1=bet and Environment.action_2=pass));
    reward_neg2 if
        Environment.turn=finish and Environment.reward = -2;
        --  ((Environment.action_0=bet and Environment.action_1=bet and Environment.card_p0 < Environment.card_p1) or
        --   (Environment.action_0=pass and Environment.action_1=bet and Environment.action_2=bet and Environment.card_p0 < Environment.card_p1));
end Evaluation

InitStates
    Environment.turn = deal0 and Environment.action_0 = none and Environment.action_1 = none and
     Environment.action_2 = none and Environment.card_p0 = -1 and Environment.card_p1 = -1 and
     Environment.reward = 0 and
     Player0.null = true and Player1.null = true;
end InitStates

Groups
    player0 = {Player0};
    player1 = {Player1};
end Groups

Formulae
    <player0> F custom_condition;
    <player0> F player0_has_higher_card;
    <player0> F reward_2;
    <player0> F (reward_2 or reward_1);
    <player0> F (reward_2 or reward_1 or reward_neg1);
    <player1> F reward_neg2;
    <player1> F (reward_neg2 or reward_neg1);
    <player1> F (reward_neg2 or reward_neg1 or reward_1);
end Formulae
